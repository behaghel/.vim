snippet class
	class ${1:ClassName} {
		${2}
	}
snippet cclass
	case class ${1:ClassName} {
		${2}
	}
snippet trait
	trait ${1:TraitName} {
		${2}
	}
snippet object
	object ${2:ObjectName} {
		${2}
	}
snippet application
	object ${2:ObjectName} extends Application {
		${2}
	}
snippet def
	def ${1:method}(${2})${3: : ${4:Unit}} = {
		${5}
	}
snippet if
	if (${1:condition}) {
	    ${2:// expression}
	}
snippet ifelse
	if (${1:condition}) {
	    ${2:// expression}
	} else {
	  
	}
snippet while
	while (${1:condition}) {
	    ${2:// expression}
	}
snippet try
	try {
	    ${2:// expression}
	} 
	catch {
	    case e : ${1:Exception} => ${3:// expression}
	}
snippet tfc
	try {
	    ${2:// expression}
	} 
	catch {
	    case e : ${1:Exception} => ${3:// expression}
	}
	finally {
	  ${4:// expression}
	}
snippet pr
	private 
snippet pri
	private[${1:this}]
snippet pro
	protected 
snippet prop
	protected[${1:this}]
snippet for
	for (${1} <- ${2}) {
	  ${3}
	}
snippet foreach
	foreach {${1} =>
	  ${2}
	}
snippet match
	match {
	    case ${1} => ${2}
	}
snippet case
	case ${1} => ${2}
snippet p
	println(${1})
snippet main
	def main(args: Array[String]) {
	  ${1}
	}
snippet 1
	(${1:first}: ${2:Type})
snippet 2
	(${1:first}: ${2:Type}, ${3:second}: ${4:Type})
snippet 3
	(${1:first}: ${2:Type}, ${3:second}: ${4:Type}, ${5:third}: ${6:Type})

snippet specclass
	import org.scalatest.Spec
	import org.scalatest.matchers.ShouldMatchers
	import scala.collection.mutable.Stack

	class ${1:spec} extends Spec with ShouldMatchers {
	  ${2}
	}
snippet spec
	  describe ("${1:domain}") {
		describe ("${2:tool}") {
		  it ("${3:contract}") {
			 ${4:test} 
		  }
		}
	  }

snippet mongorecord
	class ${1:record} private () extends MongoRecord[$1] with ObjectIdPk[$1] {
	  def meta = $1
	  ${2:// fields}
	}
	object $1 extends $1 with MongoMetaRecord[$1]

snippet bsonrecord
	class ${1:record} private () extends BsonRecord[$1] {
	  def meta = $1
	  ${2:// fields}
	}
	object $1 extends $1 with BsonMetaRecord[$1]

snippet jsonobject
	case class ${1:record}(${2:fields}) extends JsonObject[$1] {
	  def meta = $1
	  ${2:// fields}
	}
	object $1 extends JsonObjectMeta[$1]
